name: 🌿 Branch Management & GitFlow

on:
  push:
    branches: [ master, develop, 'feature/*', 'release/*', 'hotfix/*' ]
  pull_request:
    types: [opened, synchronize, closed]
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Branch action'
        required: true
        default: 'create-feature'
        type: choice
        options:
        - create-feature
        - create-release
        - create-hotfix
        - merge-to-develop
        - merge-to-master
      branch_name:
        description: 'Branch name (without prefix)'
        required: false
        default: 'new-feature'

jobs:
  # ============================================
  # Validation des noms de branches
  # ============================================
  validate-branch:
    name: ✅ Validate Branch Name
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: 🔍 Check branch naming convention
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        echo "Checking branch: $BRANCH_NAME"
        
        # Règles de nommage GitFlow
        if [[ "$BRANCH_NAME" =~ ^(master|develop)$ ]] || \
           [[ "$BRANCH_NAME" =~ ^feature/[a-z0-9-]+$ ]] || \
           [[ "$BRANCH_NAME" =~ ^release/[0-9]+\.[0-9]+\.[0-9]+$ ]] || \
           [[ "$BRANCH_NAME" =~ ^hotfix/[a-z0-9-]+$ ]]; then
          echo "✅ Branch name follows GitFlow convention"
        else
          echo "❌ Branch name does not follow GitFlow convention"
          echo "Expected formats:"
          echo "  - feature/feature-name"
          echo "  - release/1.2.3"
          echo "  - hotfix/hotfix-name"
          exit 1
        fi

  # ============================================
  # Auto-création de branches
  # ============================================
  create-branch:
    name: 🌱 Create Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: 🌱 Create and push branch
      run: |
        ACTION="${{ github.event.inputs.action }}"
        BRANCH_NAME="${{ github.event.inputs.branch_name }}"
        
        case $ACTION in
          "create-feature")
            FULL_BRANCH="feature/$BRANCH_NAME"
            BASE_BRANCH="develop"
            ;;
          "create-release")
            FULL_BRANCH="release/$BRANCH_NAME"
            BASE_BRANCH="develop"
            ;;
          "create-hotfix")
            FULL_BRANCH="hotfix/$BRANCH_NAME"
            BASE_BRANCH="master"
            ;;
          *)
            echo "❌ Unknown action: $ACTION"
            exit 1
            ;;
        esac
        
        echo "🌱 Creating branch $FULL_BRANCH from $BASE_BRANCH"
        git checkout $BASE_BRANCH
        git checkout -b $FULL_BRANCH
        git push origin $FULL_BRANCH
        
        echo "✅ Branch $FULL_BRANCH created successfully"

  # ============================================
  # Auto-merge après tests réussis
  # ============================================
  auto-merge:
    name: 🔄 Auto-merge PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ⏳ Wait for CI to complete
      uses: fountainhead/action-wait-for-check@v1.1.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: '🧪 Tests & Code Quality'
        ref: ${{ github.event.pull_request.head.sha }}
        timeoutSeconds: 3600
        
    - name: 🔄 Auto-merge if tests pass
      uses: pascalgn/merge-action@v0.15.6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        merge_method: squash
        merge_commit_message: |
          ${{ github.event.pull_request.title }} (#${{ github.event.pull_request.number }})
          
          ${{ github.event.pull_request.body }}
          
          🤖 Auto-merged after successful CI checks

  # ============================================
  # Nettoyage des branches
  # ============================================
  cleanup-branches:
    name: 🧹 Cleanup Merged Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: 🧹 Delete merged branch
      run: |
        BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
        
        # Ne supprime que les branches feature, release, hotfix
        if [[ "$BRANCH_NAME" =~ ^(feature|release|hotfix)/ ]]; then
          echo "🗑️ Deleting merged branch: $BRANCH_NAME"
          git push origin --delete $BRANCH_NAME
          echo "✅ Branch $BRANCH_NAME deleted"
        else
          echo "ℹ️ Skipping deletion of protected branch: $BRANCH_NAME"
        fi

  # ============================================
  # Release automation
  # ============================================
  release-automation:
    name: 🚀 Release Automation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔍 Check if should create release
      id: check-release
      run: |
        # Vérifie s'il y a eu des changements depuis la dernière release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous tags found, creating initial release"
          echo "create_release=true" >> $GITHUB_OUTPUT
          echo "version=1.0.0" >> $GITHUB_OUTPUT
        else
          # Compare avec le dernier tag
          CHANGES=$(git log $LAST_TAG..HEAD --oneline | wc -l)
          if [ $CHANGES -gt 0 ]; then
            echo "Found $CHANGES changes since last release"
            # Incrémente automatiquement la version
            NEW_VERSION=$(echo $LAST_TAG | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "create_release=true" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No changes since last release"
            echo "create_release=false" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: 🏷️ Create Release
      if: steps.check-release.outputs.create_release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.check-release.outputs.version }}
        release_name: TennisRPG v${{ steps.check-release.outputs.version }}
        body: |
          🎾 **TennisRPG Release v${{ steps.check-release.outputs.version }}**
          
          ## What's New
          - Automatic release generated from master branch
          - All tests passing ✅
          - Code quality checks passed ✅
          
          ## Installation
          ```bash
          git clone https://github.com/your-username/TennisRPG.git
          cd TennisRPG
          pip install -r requirements.txt
          python -m TennisRPG_v2.main
          ```
          
          ## Full Changelog
          See commit history for detailed changes.
          
        draft: false
        prerelease: false

  # ============================================
  # Synchronisation develop ← master
  # ============================================
  sync-develop:
    name: 🔄 Sync develop with master
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: [release-automation]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: 🔄 Merge master into develop
      run: |
        git checkout develop
        git merge master --no-ff -m "🔄 Sync develop with master after release"
        git push origin develop
        echo "✅ develop branch synchronized with master"